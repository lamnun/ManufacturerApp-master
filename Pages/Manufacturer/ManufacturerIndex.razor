@page "/Manufacturers"
@inject IManufacturersRepository repository
@inject IJSRuntime JS

<h3>Manufacturer LIST</h3>

<p>고객사 리스트를 출력합니다.</p>

@if (manufacturers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Manufacturer Code</th>
                <th>Comment</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var manufacturer in manufacturers)
            {
                <tr>
                    <td>@manufacturer.Id</td>
                    <td>@manufacturer.Name</td>
                    <td>@manufacturer.ManufacturerCode</td>
                    <td>@manufacturer.Comment</td>
                    <td>
                        <input type="button" value="Edit" class="btn btn-primary"
                               data-toggle="modal" data-target="#manufacterEditorDialog"
                               @onclick="( () => EditeBy(manufacturer) )" />
                        @*수정하기 버튼 -> 팝업*@
                    </td>
                    <td>
                        <input type="button" value="Delete" class="btn btn-danger"
                               @onclick="( () => DeleteBy(manufacturer) )"
                               data-toggle="modal" data-target="#manufacterDeleteDialog" />
                        @*클릭시 삭제 팝업(대화상자)*@
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div>
    @*제이쿼리를 이용해서 모달창 띄우는형식*@
    <input type="button" value="등록"
           data-toggle="modal" data-target="#manufacterEditorDialog"
           class="btn btn-primary" @onclick="( () => btnCreate_Click())" />
</div>

<ManufacturersDeleteDialog OnClick="btnDelete_Click"> </ManufacturersDeleteDialog>

<ManufacturerEditorForm EditorModel="@manufacturer" SaveOrUpdated="@SaveOrUpdated">
    <EditorFormTitle>@editorFormTitle</EditorFormTitle>
</ManufacturerEditorForm>


@code {

    private string editorFormTitle = "";
    private List<Manufacturer> manufacturers;
    private Manufacturer manufacturer = new Manufacturer(); // 선택한 항목 관리

    protected void btnCreate_Click()
    {
        editorFormTitle = "등록하기";
        manufacturer = new Manufacturer(); // 모델 클리어
    }



    protected override async Task OnInitializedAsync()  //???? 오버라이드
    {
        manufacturers = await repository.GetManufacturers();  // 읽어오기
    }

    protected async Task btnDelete_Click()
    {
        //await JS.InvokeAsync<object>("alert", "여기까지 왔군요?");
        await repository.Deletemanufacturer(manufacturer.Id); //삭제
        await JS.InvokeAsync<object>("closeModal", "manufacterDeleteDialog"); //확인창 닫는거
        manufacturers = await repository.GetManufacturers(); //다시읽어오기
        manufacturer = new Manufacturer(); //선택항목 초기화

    }

    private void DeleteBy(Manufacturer manu)
    {
        manufacturer = manu;
    }

    private void EditeBy(Manufacturer manu)
    {
        editorFormTitle = "수정하기";
        manufacturer = manu;
    }

    //등록 또는 수정 후 현재페이지 다시 로드
    private async void SaveOrUpdated()
    {
        manufacturers = await repository.GetManufacturers(); //다시읽어오기
        StateHasChanged(); //? 상태는 변경되었다?

    }

}
